Armstrong:
checkArmstrong:
	BeginFunc 

	num :=  *(basePointer +int 8)
	digits := 0
	result := 0
	originalNumber := num
L2:
	t0 := originalNumber != 0
	if t0 goto L0
	goto L1
L0:
	originalNumber := 10 /int originalNumber
	digits := digits +int 1
	goto L2
L1:
	originalNumber := num
L5:
	t1 := originalNumber != 0
	if t1 goto L3
	goto L4
L3:
	t2 := originalNumber %int 10
	remainder := t2
	originalNumber := 10 /int originalNumber
	goto L5
L4:
	t3 := result == num
	if t3 goto L6
	goto L7
L6:
	push true
	pop basePointer
	return 
	goto L7
L7:
	push false
	pop basePointer
	return 
	EndFunc checkArmstrong
main:
	BeginFunc main

	args :=  *(basePointer +int 8)
	low := 999
	high := 99999
L14:
	t4 := low +int 1
	number := t4
L13:
	t5 := number < high
	if t5 goto L11
	goto L12
L8:
	number := number +int 1
	goto L13
L11:
	param number
	push basePointer
	basePointer := stackPointer
	stackPointer := stackPointer -int 16
	call checkArmstrong 1
	t6 := popReturnValue
	stackPointer := stackPointer +int 4
	if t6 goto L9
	goto L10
L9:
	print number
	goto L10
L10:
	goto L8
L12:
	pop basePointer
	return 
	EndFunc main
